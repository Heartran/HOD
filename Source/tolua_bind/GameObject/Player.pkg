$#include"GameObject/Player.h"

namespace Camera {
	class ICamera;
	class PlayerCamera;
	class Simple;
	typedef std::shared_ptr<ICamera> ICameraSharedPtr;
	typedef std::shared_ptr<PlayerCamera> PlayerCameraSharedPtr;
}

namespace  GUI {
	class Button;
	class Label;
}

namespace XmlLoader {
	class Actions;
}

namespace GameObjectData {
	class Status;
	typedef std::shared_ptr<Status> StatusSharedPtr;
	class WeaponStatus;
}

class btCollisionObject;
class btRigidBody;
typedef std::shared_ptr<btRigidBody> BtRigidBodySharedPtr;
class btCollisionShape;
typedef std::shared_ptr<btCollisionShape> BtCollisionShapeSharedPtr;
class btCylinderShape;
typedef std::shared_ptr<btCylinderShape> BtCylinderShapeSharedPtr;
class btMotionState;
typedef std::shared_ptr<btMotionState> BtMotionStateSharedPtr;

namespace MME {
	namespace Object {
		class ModelKai;
		typedef std::shared_ptr<ModelKai> ModelKaiSharedPtr;
	}
}

namespace Component {
	class RigidBodyComponent;
	typedef std::shared_ptr<RigidBodyComponent> RigidBodyComponentSharedPtr;
}


namespace GameObject {
	namespace Utils {
		class  Character;
		typedef std::shared_ptr<Character> CharacterSharedPtr;
	}



	class Player : public BaseObject
	{
	public:

		static std::shared_ptr<Player> create(
			float height,
			MME::Object::ModelKaiSharedPtr model,
			BtCylinderShapeSharedPtr shape,
			BtMotionStateSharedPtr motionState,
			BtRigidBodySharedPtr rigidbody,
			Camera::ICameraSharedPtr camera,
			Input::PlayerMouseSharedPtr mouse,
			GameObjectData::StatusSharedPtr status);

		static std::shared_ptr<Player> create(
			Utils::CharacterSharedPtr character,
			GameObjectData::StatusSharedPtr status);


		virtual ~Player();


		void release();

		void update(float elapsedTime);
		void preDraw()const;
		void drawHUD() const;

		virtual const RTTI & getRTTI() const;
		static const RTTI rtti;


		void removeFromWorld();

		void addToWorld();

		virtual void onCollisionEnter(btPersistentManifold *manifold, btCollisionObject *me, btCollisionObject *obj);
		virtual void onCollisionStay(btPersistentManifold *manifold, btCollisionObject *me, btCollisionObject *obj);
		virtual void onCollisionExit(btCollisionObject *me, btCollisionObject *obj);

		float getElapsedTime()const {
			return mElapsedTime;
		}

		Input::PlayerMouse* getMouse() {
			return mMouse.get();
		}
		btVector3 getMousePos()const;

		//Camera::PlayerCamera* getCamera(){
		//	return mCamera;
		//}

		MME::Object::ModelKai* getModel() {
			return mModel.get();
		}

		float getHeight()const {
			return mHeight;
		}

		GameObjectData::Status* getStatus() {
			return mStatus.get();
		}

		Utils::CharacterSharedPtr getCharacter() {
			return mCharacter;
		}


		bool onGround()const;

		void addActions(XmlLoader::Actions* actions);

		btCollisionObject* getBtCollisionObject();
	};


}



namespace std {
class shared_ptr
{
	TEMPLATE_BIND(T, GameObject::Player);
	shared_ptr();	
	~shared_ptr();

	void reset(T*);
	
	T* get() const;
	
};
}//end std

