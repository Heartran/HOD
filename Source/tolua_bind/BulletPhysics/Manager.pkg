$#include<BulletPhysics/Manager.h>

class btGhostPairCallback;
class btBroadphaseInterface;

class EventManager;

namespace BulletPhysics {
class FilterCallbackUsingGameObject;
class CDxBulletDebugDrawer;
class CDxBulletDebugDrawerEx;
class CSegaBulletDebugDrawer;

enum WorldIndex{
	GameWorldIndex=0,
	CutSceneWorldIndex=1
};

enum CollisionFilterGroups
{
	DefaultFilter = 1,
	StaticFilter = 2,
	KinematicFilter = 4,
	DebrisFilter = 8,
	SensorTrigger = 16,
	CharacterFilter = 32,
	MMDObjectFilter = 64,
	PlayerFilter = 128,
	EnemyFilter = 256,
	BulletFilter = 512,
	AllFilter = -1, //all bits sets: DefaultFilter | StaticFilter | KinematicFilter | DebrisFilter | SensorTrigger
	AllFilterExceptMMDObject = AllFilter  & ~MMDObjectFilter,
	DynamicFilter = AllFilterExceptMMDObject & StaticFilter
};



class Manager
{
public :
	
	static BulletPhysics::Manager* instance( int index = GameWorldIndex );
	//インデックス指定しなくて大丈夫な実装にした
	//そのため静的メンバ関数にしなかった
	void release();
	
	void addToWorld( btCollisionObject *pbtCo );
	void addToWorld( btCollisionObject *pbtCo, unsigned short unGroupIdx, unsigned short unGroupMask );
	void addToWorld( btRigidBody *pbtRB, unsigned short unGroupIdx, unsigned short unGroupMask );
	void addToWorld( btRigidBody *pbtRB );
	void addToWorld( btTypedConstraint *pctConstraint );
	void removeFromWorld( btCollisionObject *pbtCo );
	void removeFromWorld( btRigidBody *pbtRB );
	void removeFromWorld( btTypedConstraint *pctConstraint );
	
	//void addHeightfieldTerrainShape();

	void update( float fElapsedTime );
	//debug用。遅い使うのやめたほうがいい
	void drawWorld();
	//debug用。遅い。使うのやめたほうがいい
	static void drawObject( const btCollisionObject *pObj, unsigned int color = 0xff000000 );
	//debug用。遅い。使うのやめたほうがいい
	void drawConstraint(btTypedConstraint* pConstraint);
	void clearForces();


	btDiscreteDynamicsWorld* getWorldPtr(){
		return pBtWorld_;
	}

	btIDebugDraw* getDebugDrawerPtr(){
		return pDebugDrawer_;
	}

	void checkAllContactPoints();

	int getNumberCollisionObjects()const;

};
}